{"version":3,"sources":["SidebarChat.js","Sidebar.js","axios.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["SidebarChat","className","Avatar","Sidebar","src","IconButton","type","placeholder","instance","axios","create","baseURL","Chat","messages","useState","input","setInput","sendMessage","e","a","preventDefault","post","message","name","timestamp","received","AttachFile","map","Date","toUTCString","value","onChange","target","onClick","App","setMsg","useEffect","get","then","response","data","channel","Pusher","cluster","subscribe","bind","newMessage","unbind_all","unsubscribe","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5f999f6e.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport \"./SidebarChat.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\n\r\nconst SidebarChat = () => {\r\n    return (\r\n        <div className=\"sidebarchat\">\r\n            <Avatar />\r\n            <div className=\"avatar_chat\">\r\n                <h2>Roomname</h2>\r\n                <p>I m sending you the last message</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SidebarChat;","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\r\nimport SidebarChat from \"./SidebarChat\";\r\n\r\n\r\nconst Sidebar = () => {\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar_header\">\r\n                <Avatar src=\"https://avatars0.githubusercontent.com/u/61323807?s=400&u=f710e84e6db838c86f6fced6ca94240167ed5b3a&v=4\" />\r\n                <div className=\"sidebar_headerright\">\r\n\r\n                    <IconButton>\r\n                        <DonutLargeIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ChatIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"searchbar\">\r\n                <div className=\"searchbar_container\">\r\n                    <SearchOutlinedIcon />\r\n                    <input type=\"text\" placeholder=\"Search or Start New Chat \" />\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"sidebar_chat\">\r\n                <SidebarChat />\r\n                <SidebarChat />\r\n                <SidebarChat />\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Sidebar;","\r\nimport axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n\r\n\r\n    baseURL: \"http://localhost:9000\",\r\n});\r\n\r\nexport default instance;","import React, { useState } from \"react\";\r\nimport \"./Chat.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport { AttachFile, SearchOutlined, MoreVert } from \"@material-ui/icons\";\r\nimport InsertEmotionIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport axios from \"./axios\";\r\nconst Chat = ({ messages }) => {\r\n    const [input, setInput] = useState(\"\")\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n        await axios.post(\"/messages/new\", {\r\n            message: input,\r\n            name: \"Unknown\",\r\n            timestamp: \"Just Now\",\r\n            received: false,\r\n\r\n        });\r\n        setInput(\"\");\r\n    }\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat-header\">\r\n                <Avatar />\r\n                <div className=\"chat-right\">\r\n                    <h3>Dance Room</h3>\r\n                    <p>Last Seen...</p>\r\n                </div>\r\n                <div className=\"chat-symbol\">\r\n                    <IconButton>\r\n                        <SearchOutlined />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachFile />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div className=\"chat-body\">\r\n\r\n                {messages.map((message) => {\r\n\r\n                    return (\r\n                        <p className={`chat-message ${message.received && \"chat-receiver\"}`}>\r\n                            <span className=\"chat_name\">\r\n                                {message.name}\r\n\r\n                            </span>\r\n                            {message.message}\r\n\r\n\r\n                            <span className=\"chat_timestamp\">\r\n                                {message.timestamp}\r\n                            </span>\r\n                        </p>\r\n                    )\r\n                })}\r\n\r\n                <p className=\"chat-message chat-receiver\">\r\n                    <span className=\"chat_name\">\r\n                        Priya\r\n                        </span>\r\n                        This is my message\r\n\r\n                    <span className=\"chat_timestamp\">\r\n                        {new Date().toUTCString()}\r\n                    </span>\r\n                </p>\r\n                <p className=\"chat-message\">\r\n                    <span className=\"chat_name\">\r\n                        Priya\r\n                        </span>\r\n                        This is my message\r\n\r\n                    <span className=\"chat_timestamp\">\r\n                        {new Date().toUTCString()}\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"chat-footer\">\r\n                <InsertEmotionIcon />\r\n                <form>\r\n                    <input value={input} onChange={e => setInput(e.target.value)} type=\"text\" placeholder=\"Type a message\" />\r\n                    <button onClick={sendMessage} type=\"submit\">Send A Message</button>\r\n                </form>\r\n                <MicIcon />\r\n\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Chat;","import React, { useEffect, useState } from 'react';\nimport Pusher from \"pusher-js\";\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from \"./Chat\";\nimport axios from \"./axios\";\nfunction App() {\n  const [messages, setMsg] = useState([]);\n  useEffect(() => {\n\n    axios.get('/messages/sync').then((response) => {\n\n      setMsg(response.data);\n    });\n\n  }, []);\n  useEffect(() => {\n\n    const pusher = new Pusher('1fca8559b5443a0eb438', {\n      cluster: 'ap2'\n    });\n\n    const channel = pusher.subscribe('messages');\n    channel.bind('inserted', (newMessage) => {\n\n      setMsg([...messages, newMessage]);\n    });\n    return () => {\n      channel.unbind_all();\n      channel.unsubscribe();\n    }\n\n\n  }, [messages]);\n  console.log(messages);\n  return (\n    <div className=\"App\">\n      <div className=\"App_body\">\n        <Sidebar />\n        <Chat messages={messages} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}